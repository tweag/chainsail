import asyncio

from grpclib.utils import graceful_exit
from grpclib.server import Server, Stream
from grpclib.client import Channel
from grpclib.health.service import Health

# generated by protoc
from .status_checker_pb2 import HealthStateRequest, HealthStateResponse
from .status_checker_pb2_grpc import StatusCheckerServicer, StatusCheckerStub


class StatusChecker(StatusCheckerServicer):
    async def HealthChecker(self, stream: Stream[HealthStateRequest, HealthStateResponse]) -> None:
        request = await stream.recv_message()
        assert request is not None
        health_status = Health()
        await stream.send_message(HealthStateResponse(health_status=health_status))


async def run_server(
    *, host: str = "127.0.0.1", port: int = 50051, deploy_env: str = "prod"
) -> None:
    server = Server([StatusChecker()])
    with graceful_exit([server]):
        if deploy_env == "prod":
            await server.start()
        elif deploy_env == "test" or deploy_env == "dev" or deploy_env == "development":
            await server.start(host, port)
            print(f"Serving gRPC on {host}:{port}")
            await server.wait_closed()


async def run_client(*, dest: str = "127.0.0.1", port: int = 50051) -> None:
    async with Channel(dest, port) as channel:
        status_checker = StatusCheckerStub(channel)
        reply = await status_checker.HealthChecker(HealthStateRequest())
        print(reply.health_status)
